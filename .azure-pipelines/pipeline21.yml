trigger: none
pr: none

# ---- Monthly ALLADH schedules (on branch develop_new) ----
schedules:
- cron: "5 2 1 * *"
  displayName: "Monthly ALLADH – NonProd"
  branches: { include: [ develop_new ] }
  always: true
- cron: "35 2 1 * *"
  displayName: "Monthly ALLADH – Prod"
  branches: { include: [ develop_new ] }
  always: true

# ---------------- Parameters ----------------
parameters:
- name: run_mode
  type: string
  default: ByCustodian
  values: [ ByCustodian, AllADH ]

- name: adh_group
  type: string
  default: ""

- name: adh_groups_list           # e.g. ["CSM","NHH"]
  type: object
  default: []

- name: adh_subscription_type
  type: string
  default: prd
  values: [ prd, nonprd ]

- name: poolType
  type: string
  default: self
  values: [ hosted, self ]

- name: poolSuffix
  type: string
  default: '_agent1'
  values: [ '_agent1', '_agent2' ]

# Inputs
- name: prodCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/prod_permissions.csv'
- name: nonProdCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/nonprod_permissions.csv'
- name: kvSecretsCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/kvsecretsscan.csv'
- name: adlsCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/adls_permissions.csv'

# Helper var: first custodian (for multi)
variables:
- name: firstCustodian
  value: ''
- ${{ if gt(length(parameters.adh_groups_list), 0) }}:
  - name: firstCustodian
    value: ${{ parameters.adh_groups_list[0] }}

stages:

# ===================== SCHEDULED MONTHLY ALLADH =====================
- stage: ALLADH_NonProd
  displayName: "ALLADH – NonProd (monthly)"
  condition: and(eq(variables['Build.Reason'],'Schedule'), eq(variables['Build.SourceBranchName'],'develop_new'))
  jobs:
  # RG Permissions
  - template: templates/job.powershell-with-az.yml
    parameters:
      variableGroup: modernization_tfstate_backend_details
      displayName: 'RG Permissions – ALLADH NonProd'
      scriptPath: 'sanitychecks/scripts/Scan-RG-Permissions-AllADH.ps1'
      workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
      arguments: >
        -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
        -ProdCsvPath "${{ parameters.prodCsvPath }}" -NonProdCsvPath "${{ parameters.nonProdCsvPath }}"
        -OutputDir "$(Build.ArtifactStagingDirectory)/rg-perms" -BranchName "$(Build.SourceBranchName)"
      artifactName: 'rg-perms-ALLADH'
      publishPath: '$(Build.ArtifactStagingDirectory)/rg-perms'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
      useDemands: false
  # RG Tags
  - template: templates/job.powershell-with-az.yml
    parameters:
      variableGroup: modernization_tfstate_backend_details
      displayName: 'RG Tags – ALLADH NonProd'
      scriptPath: 'sanitychecks/scripts/Scan-RG-Tags.ps1'
      workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
      arguments: >
        -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
        -ScanAll -OutputDir "$(Build.ArtifactStagingDirectory)/rg-tags" -BranchName "$(Build.SourceBranchName)"
      artifactName: 'rg-tags-ALLADH'
      publishPath: '$(Build.ArtifactStagingDirectory)/rg-tags'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
      useDemands: false
  # KV Secrets
  - template: templates/job.powershell-with-az.yml
    parameters:
      variableGroup: modernization_tfstate_backend_details
      displayName: 'KV Secrets – ALLADH NonProd'
      scriptPath: 'sanitychecks/scripts/Scan-KV-Secrets-AllADH.ps1'
      workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
      arguments: >
        -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
        -SecretCsvPath "${{ parameters.kvSecretsCsvPath }}"
        -OutputDir "$(Build.ArtifactStagingDirectory)/kv-secrets" -BranchName "$(Build.SourceBranchName)"
      artifactName: 'kv-secrets-ALLADH'
      publishPath: '$(Build.ArtifactStagingDirectory)/kv-secrets'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
      useDemands: false
  # KV Permissions
  - template: templates/job.powershell-with-az.yml
    parameters:
      variableGroup: modernization_tfstate_backend_details
      displayName: 'KV Permissions – ALLADH NonProd'
      scriptPath: 'sanitychecks/scripts/Scan-KV-Permissions.ps1'
      workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
      arguments: >
        -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
        -ScanAll -OutputDir "$(Build.ArtifactStagingDirectory)/kv-perms" -BranchName "$(Build.SourceBranchName)"
      artifactName: 'kv-perms-ALLADH'
      publishPath: '$(Build.ArtifactStagingDirectory)/kv-perms'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
      useDemands: false
  # KV Firewall
  - template: templates/job.powershell-with-az.yml
    parameters:
      variableGroup: modernization_tfstate_backend_details
      displayName: 'KV Firewall – ALLADH NonProd'
      scriptPath: 'sanitychecks/scripts/Scan-KV-Networks.ps1'
      workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
      arguments: >
        -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
        -ScanAll -OutputDir "$(Build.ArtifactStagingDirectory)/kv-firewall" -BranchName "$(Build.SourceBranchName)"
      artifactName: 'kv-firewall-ALLADH'
      publishPath: '$(Build.ArtifactStagingDirectory)/kv-firewall'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
      useDemands: false
  # VNET Topology
  - template: templates/job.powershell-with-az.yml
    parameters:
      variableGroup: modernization_tfstate_backend_details
      displayName: 'VNet Topology – ALLADH NonProd'
      scriptPath: 'sanitychecks/scripts/Scan-VNet-Topology.ps1'
      workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
      arguments: >
        -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
        -ScanAll -OutputDir "$(Build.ArtifactStagingDirectory)/vnet" -BranchName "$(Build.SourceBranchName)"
      artifactName: 'vnet-ALLADH'
      publishPath: '$(Build.ArtifactStagingDirectory)/vnet'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
      useDemands: false
  # Data Factory
  - template: templates/job.powershell-with-az.yml
    parameters:
      variableGroup: modernization_tfstate_backend_details
      displayName: 'Data Factory – ALLADH NonProd'
      scriptPath: 'sanitychecks/scripts/Scan-ADF.ps1'
      workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
      arguments: >
        -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
        -ScanAll -OutputDir "$(Build.ArtifactStagingDirectory)/adf" -BranchName "$(Build.SourceBranchName)"
      artifactName: 'adf-ALLADH'
      publishPath: '$(Build.ArtifactStagingDirectory)/adf'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
      useDemands: false
  # ADLS Validation
  - template: templates/job.powershell-with-az.yml
    parameters:
      variableGroup: modernization_tfstate_backend_details
      displayName: 'ADLS Validation – ALLADH NonProd'
      scriptPath: 'sanitychecks/scripts/Validate-ADLS.ps1'
      workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
      arguments: >
        -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
        -adh_subscription_type nonprd
        -AdlsCsvPath "${{ parameters.adlsCsvPath }}"
        -ScanAll -OutputDir "$(Build.ArtifactStagingDirectory)/adls" -BranchName "$(Build.SourceBranchName)"
      artifactName: 'adls-ALLADH'
      publishPath: '$(Build.ArtifactStagingDirectory)/adls'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
      useDemands: false

- stage: ALLADH_Prod
  displayName: "ALLADH – Prod (monthly)"
  condition: and(eq(variables['Build.Reason'],'Schedule'), eq(variables['Build.SourceBranchName'],'develop_new'))
  jobs:
  # (identical to NonProd but with poolName MDM_prd_agent1 and adh_subscription_type prd where used)
  - template: templates/job.powershell-with-az.yml
    parameters:
      variableGroup: modernization_tfstate_backend_details
      displayName: 'RG Permissions – ALLADH Prod'
      scriptPath: 'sanitychecks/scripts/Scan-RG-Permissions-AllADH.ps1'
      workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
      arguments: >
        -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
        -ProdCsvPath "${{ parameters.prodCsvPath }}" -NonProdCsvPath "${{ parameters.nonProdCsvPath }}"
        -OutputDir "$(Build.ArtifactStagingDirectory)/rg-perms" -BranchName "$(Build.SourceBranchName)"
      artifactName: 'rg-perms-ALLADH'
      publishPath: '$(Build.ArtifactStagingDirectory)/rg-perms'
      poolType: self
      poolName: 'MDM_prd_agent1'
      useDemands: false
  - template: templates/job.powershell-with-az.yml
    parameters:
      variableGroup: modernization_tfstate_backend_details
      displayName: 'RG Tags – ALLADH Prod'
      scriptPath: 'sanitychecks/scripts/Scan-RG-Tags.ps1'
      workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
      arguments: >
        -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
        -ScanAll -OutputDir "$(Build.ArtifactStagingDirectory)/rg-tags" -BranchName "$(Build.SourceBranchName)"
      artifactName: 'rg-tags-ALLADH'
      publishPath: '$(Build.ArtifactStagingDirectory)/rg-tags'
      poolType: self
      poolName: 'MDM_prd_agent1'
      useDemands: false
  - template: templates/job.powershell-with-az.yml
    parameters:
      variableGroup: modernization_tfstate_backend_details
      displayName: 'KV Secrets – ALLADH Prod'
      scriptPath: 'sanitychecks/scripts/Scan-KV-Secrets-AllADH.ps1'
      workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
      arguments: >
        -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
        -SecretCsvPath "${{ parameters.kvSecretsCsvPath }}"
        -OutputDir "$(Build.ArtifactStagingDirectory)/kv-secrets" -BranchName "$(Build.SourceBranchName)"
      artifactName: 'kv-secrets-ALLADH'
      publishPath: '$(Build.ArtifactStagingDirectory)/kv-secrets'
      poolType: self
      poolName: 'MDM_prd_agent1'
      useDemands: false
  - template: templates/job.powershell-with-az.yml
    parameters:
      variableGroup: modernization_tfstate_backend_details
      displayName: 'KV Permissions – ALLADH Prod'
      scriptPath: 'sanitychecks/scripts/Scan-KV-Permissions.ps1'
      workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
      arguments: >
        -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
        -ScanAll -OutputDir "$(Build.ArtifactStagingDirectory)/kv-perms" -BranchName "$(Build.SourceBranchName)"
      artifactName: 'kv-perms-ALLADH'
      publishPath: '$(Build.ArtifactStagingDirectory)/kv-perms'
      poolType: self
      poolName: 'MDM_prd_agent1'
      useDemands: false
  - template: templates/job.powershell-with-az.yml
    parameters:
      variableGroup: modernization_tfstate_backend_details
      displayName: 'KV Firewall – ALLADH Prod'
      scriptPath: 'sanitychecks/scripts/Scan-KV-Networks.ps1'
      workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
      arguments: >
        -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
        -ScanAll -OutputDir "$(Build.ArtifactStagingDirectory)/kv-firewall" -BranchName "$(Build.SourceBranchName)"
      artifactName: 'kv-firewall-ALLADH'
      publishPath: '$(Build.ArtifactStagingDirectory)/kv-firewall'
      poolType: self
      poolName: 'MDM_prd_agent1'
      useDemands: false
  - template: templates/job.powershell-with-az.yml
    parameters:
      variableGroup: modernization_tfstate_backend_details
      displayName: 'VNet Topology – ALLADH Prod'
      scriptPath: 'sanitychecks/scripts/Scan-VNet-Topology.ps1'
      workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
      arguments: >
        -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
        -ScanAll -OutputDir "$(Build.ArtifactStagingDirectory)/vnet" -BranchName "$(Build.SourceBranchName)"
      artifactName: 'vnet-ALLADH'
      publishPath: '$(Build.ArtifactStagingDirectory)/vnet'
      poolType: self
      poolName: 'MDM_prd_agent1'
      useDemands: false
  - template: templates/job.powershell-with-az.yml
    parameters:
      variableGroup: modernization_tfstate_backend_details
      displayName: 'Data Factory – ALLADH Prod'
      scriptPath: 'sanitychecks/scripts/Scan-ADF.ps1'
      workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
      arguments: >
        -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
        -ScanAll -OutputDir "$(Build.ArtifactStagingDirectory)/adf" -BranchName "$(Build.SourceBranchName)"
      artifactName: 'adf-ALLADH'
      publishPath: '$(Build.ArtifactStagingDirectory)/adf'
      poolType: self
      poolName: 'MDM_prd_agent1'
      useDemands: false
  - template: templates/job.powershell-with-az.yml
    parameters:
      variableGroup: modernization_tfstate_backend_details
      displayName: 'ADLS Validation – ALLADH Prod'
      scriptPath: 'sanitychecks/scripts/Validate-ADLS.ps1'
      workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
      arguments: >
        -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
        -adh_subscription_type prd
        -AdlsCsvPath "${{ parameters.adlsCsvPath }}"
        -ScanAll -OutputDir "$(Build.ArtifactStagingDirectory)/adls" -BranchName "$(Build.SourceBranchName)"
      artifactName: 'adls-ALLADH'
      publishPath: '$(Build.ArtifactStagingDirectory)/adls'
      poolType: self
      poolName: 'MDM_prd_agent1'
      useDemands: false

# ===================== MANUAL SINGLE ByCustodian =====================
- ${{ if and(eq(parameters.run_mode, 'ByCustodian'), eq(length(parameters.adh_groups_list), 0)) }}:
  - stage: ByCustodian_Single
    displayName: "ByCustodian – ${{ parameters.adh_group }} (${{ parameters.adh_subscription_type }})"
    jobs:
    # RG Permissions
    - template: templates/job.powershell-with-az.yml
      parameters:
        variableGroup: modernization_tfstate_backend_details
        displayName: "RG Permissions – ${{ parameters.adh_group }}"
        scriptPath: 'sanitychecks/scripts/Scan-RG-Permissions-ByCustodian.ps1'
        workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
        arguments: >
          -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
          -ProdCsvPath "${{ parameters.prodCsvPath }}" -NonProdCsvPath "${{ parameters.nonProdCsvPath }}"
          -adh_group "${{ parameters.adh_group }}" -OutputDir "$(Build.ArtifactStagingDirectory)/rg-perms" -BranchName "$(Build.SourceBranchName)"
        artifactName: 'rg-perms'
        publishPath: '$(Build.ArtifactStagingDirectory)/rg-perms'
        poolType: self
        poolSuffix: ${{ parameters.poolSuffix }}
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        useDemands: true
    # RG Tags
    - template: templates/job.powershell-with-az.yml
      parameters:
        variableGroup: modernization_tfstate_backend_details
        displayName: "RG Tags – ${{ parameters.adh_group }}"
        scriptPath: 'sanitychecks/scripts/Scan-RG-Tags.ps1'
        workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
        arguments: >
          -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
          -adh_group "${{ parameters.adh_group }}" -OutputDir "$(Build.ArtifactStagingDirectory)/rg-tags" -BranchName "$(Build.SourceBranchName)"
        artifactName: 'rg-tags'
        publishPath: '$(Build.ArtifactStagingDirectory)/rg-tags'
        poolType: self
        poolSuffix: ${{ parameters.poolSuffix }}
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        useDemands: true
    # KV Secrets
    - template: templates/job.powershell-with-az.yml
      parameters:
        variableGroup: modernization_tfstate_backend_details
        displayName: "KV Secrets – ${{ parameters.adh_group }}"
        scriptPath: 'sanitychecks/scripts/Scan-KV-Secrets-ByCustodian.ps1'
        workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
        arguments: >
          -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
          -SecretCsvPath "${{ parameters.kvSecretsCsvPath }}"
          -adh_group "${{ parameters.adh_group }}" -OutputDir "$(Build.ArtifactStagingDirectory)/kv-secrets" -BranchName "$(Build.SourceBranchName)"
        artifactName: 'kv-secrets'
        publishPath: '$(Build.ArtifactStagingDirectory)/kv-secrets'
        poolType: self
        poolSuffix: ${{ parameters.poolSuffix }}
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        useDemands: true
    # KV Permissions
    - template: templates/job.powershell-with-az.yml
      parameters:
        variableGroup: modernization_tfstate_backend_details
        displayName: "KV Permissions – ${{ parameters.adh_group }}"
        scriptPath: 'sanitychecks/scripts/Scan-KV-Permissions.ps1'
        workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
        arguments: >
          -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
          -adh_group "${{ parameters.adh_group }}" -OutputDir "$(Build.ArtifactStagingDirectory)/kv-perms" -BranchName "$(Build.SourceBranchName)"
        artifactName: 'kv-perms'
        publishPath: '$(Build.ArtifactStagingDirectory)/kv-perms'
        poolType: self
        poolSuffix: ${{ parameters.poolSuffix }}
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        useDemands: true
    # KV Firewall
    - template: templates/job.powershell-with-az.yml
      parameters:
        variableGroup: modernization_tfstate_backend_details
        displayName: "KV Firewall – ${{ parameters.adh_group }}"
        scriptPath: 'sanitychecks/scripts/Scan-KV-Networks.ps1'
        workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
        arguments: >
          -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
          -adh_group "${{ parameters.adh_group }}" -OutputDir "$(Build.ArtifactStagingDirectory)/kv-firewall" -BranchName "$(Build.SourceBranchName)"
        artifactName: 'kv-firewall'
        publishPath: '$(Build.ArtifactStagingDirectory)/kv-firewall'
        poolType: self
        poolSuffix: ${{ parameters.poolSuffix }}
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        useDemands: true
    # VNet
    - template: templates/job.powershell-with-az.yml
      parameters:
        variableGroup: modernization_tfstate_backend_details
        displayName: "VNet Topology – ${{ parameters.adh_group }}"
        scriptPath: 'sanitychecks/scripts/Scan-VNet-Topology.ps1'
        workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
        arguments: >
          -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
          -adh_group "${{ parameters.adh_group }}" -OutputDir "$(Build.ArtifactStagingDirectory)/vnet" -BranchName "$(Build.SourceBranchName)"
        artifactName: 'vnet'
        publishPath: '$(Build.ArtifactStagingDirectory)/vnet'
        poolType: self
        poolSuffix: ${{ parameters.poolSuffix }}
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        useDemands: true
    # ADF
    - template: templates/job.powershell-with-az.yml
      parameters:
        variableGroup: modernization_tfstate_backend_details
        displayName: "Data Factory – ${{ parameters.adh_group }}"
        scriptPath: 'sanitychecks/scripts/Scan-ADF.ps1'
        workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
        arguments: >
          -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
          -adh_group "${{ parameters.adh_group }}" -OutputDir "$(Build.ArtifactStagingDirectory)/adf" -BranchName "$(Build.SourceBranchName)"
        artifactName: 'adf'
        publishPath: '$(Build.ArtifactStagingDirectory)/adf'
        poolType: self
        poolSuffix: ${{ parameters.poolSuffix }}
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        useDemands: true
    # ADLS
    - template: templates/job.powershell-with-az.yml
      parameters:
        variableGroup: modernization_tfstate_backend_details
        displayName: "ADLS Validation – ${{ parameters.adh_group }}"
        scriptPath: 'sanitychecks/scripts/Validate-ADLS.ps1'
        workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
        arguments: >
          -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
          -adh_group "${{ parameters.adh_group }}" -adh_subscription_type "${{ parameters.adh_subscription_type }}"
          -AdlsCsvPath "${{ parameters.adlsCsvPath }}"
          -OutputDir "$(Build.ArtifactStagingDirectory)/adls" -BranchName "$(Build.SourceBranchName)"
        artifactName: 'adls'
        publishPath: '$(Build.ArtifactStagingDirectory)/adls'
        poolType: self
        poolSuffix: ${{ parameters.poolSuffix }}
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        useDemands: true

# ===================== MANUAL MULTI (shared agent from FIRST custodian) =====================
- ${{ if and(eq(parameters.run_mode, 'ByCustodian'), gt(length(parameters.adh_groups_list), 0)) }}:
  - stage: ByCustodian_Multi
    displayName: "ByCustodian – Multi (${{ variables.firstCustodian }}…)"
    variables:
    - group: modernization_tfstate_backend_details
    jobs:
    # Example: run only RG Permissions & ADLS per custodian to keep runtime sane.
    - ${{ each cust in parameters.adh_groups_list }}:
      - template: templates/job.powershell-with-az.yml
        parameters:
          variableGroup: modernization_tfstate_backend_details
          displayName: "RG Permissions – ${{ cust }}"
          scriptPath: 'sanitychecks/scripts/Scan-RG-Permissions-ByCustodian.ps1'
          workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
          arguments: >
            -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
            -ProdCsvPath "${{ parameters.prodCsvPath }}" -NonProdCsvPath "${{ parameters.nonProdCsvPath }}"
            -adh_group "${{ cust }}" -OutputDir "$(Build.ArtifactStagingDirectory)/rg-perms" -BranchName "$(Build.SourceBranchName)"
          artifactName: 'rg-perms'
          publishPath: '$(Build.ArtifactStagingDirectory)/rg-perms'
          poolType: self
          poolName: ${{ format('{0}_{1}{2}', variables.firstCustodian, parameters.adh_subscription_type, parameters.poolSuffix) }}
          useDemands: false
    - ${{ each cust in parameters.adh_groups_list }}:
      - template: templates/job.powershell-with-az.yml
        parameters:
          variableGroup: modernization_tfstate_backend_details
          displayName: "ADLS – ${{ cust }}"
          scriptPath: 'sanitychecks/scripts/Validate-ADLS.ps1'
          workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
          arguments: >
            -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
            -adh_group "${{ cust }}" -adh_subscription_type "${{ parameters.adh_subscription_type }}"
            -AdlsCsvPath "${{ parameters.adlsCsvPath }}"
            -OutputDir "$(Build.ArtifactStagingDirectory)/adls" -BranchName "$(Build.SourceBranchName)"
          artifactName: 'adls'
          publishPath: '$(Build.ArtifactStagingDirectory)/adls'
          poolType: self
          poolName: ${{ format('{0}_{1}{2}', variables.firstCustodian, parameters.adh_subscription_type, parameters.poolSuffix) }}
          useDemands: false
