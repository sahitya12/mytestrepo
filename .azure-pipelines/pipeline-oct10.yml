trigger: none
pr: none

# ----- monthly schedule on develop_new -----
schedules:
- cron: "5 2 1 * *"
  displayName: "Monthly ALLADH – NonProd"
  branches: { include: [ develop_new ] }
  always: true
- cron: "35 2 1 * *"
  displayName: "Monthly ALLADH – Prod"
  branches: { include: [ develop_new ] }
  always: true

# ------------------- parameters -------------------
parameters:
- name: run_mode                # ByCustodian | AllADH
  type: string
  default: ByCustodian
  values: [ ByCustodian, AllADH ]

- name: adh_group              # single custodian
  type: string
  default: ""

- name: adh_groups_list        # multi-custodian list (e.g. ["CSM","NHH"])
  type: object
  default: []

- name: adh_subscription_type
  type: string
  default: prd
  values: [ prd, nonprd ]

# self-hosted agent suffix; choose '', '_agent1', or '_agent2'
- name: poolSuffix
  type: string
  default: '_agent1'
  values: [ '', '_agent1', '_agent2' ]

# inputs
- name: prodCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/prod_permissions.csv'
- name: nonProdCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/nonprod_permissions.csv'
- name: kvSecretsCsvPath
  type: string
  default: '$(Build.SourcesDirectory)/sanitychecks/inputs/kvsecretsscan.csv'

# helper: first custodian in list (for shared pool)
variables:
- name: firstCustodian
  value: ''
- ${{ if gt(length(parameters.adh_groups_list), 0) }}:
  - name: firstCustodian
    value: ${{ parameters.adh_groups_list[0] }}

stages:

# ===================== SCHEDULED MONTHLY ALLADH =====================
- stage: ALLADH_NonProd
  displayName: "ALLADH – NonProd (monthly)"
  condition: and(eq(variables['Build.Reason'],'Schedule'), eq(variables['Build.SourceBranchName'],'develop_new'))
  jobs:
  - template: stages/rg-permissions.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: nonprd
      prodCsvPath: ${{ parameters.prodCsvPath }}
      nonProdCsvPath: ${{ parameters.nonProdCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
      poolSuffix: '_agent1'
      useDemands: false
  - template: stages/rg-tags.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: nonprd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-tags'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
      poolSuffix: '_agent1'
      useDemands: false
  - template: stages/kv-secrets.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: nonprd
      secretsCsvPath: ${{ parameters.kvSecretsCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-secrets'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
      poolSuffix: '_agent1'
      useDemands: false
  - template: stages/kv-permissions.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: nonprd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
      poolSuffix: '_agent1'
      useDemands: false
  - template: stages/kv-firewall.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: nonprd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-firewall'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_nonprd_agent1'
      poolSuffix: '_agent1'
      useDemands: false

- stage: ALLADH_Prod
  displayName: "ALLADH – Prod (monthly)"
  condition: and(eq(variables['Build.Reason'],'Schedule'), eq(variables['Build.SourceBranchName'],'develop_new'))
  jobs:
  - template: stages/rg-permissions.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: prd
      prodCsvPath: ${{ parameters.prodCsvPath }}
      nonProdCsvPath: ${{ parameters.nonProdCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_prd_agent1'
      poolSuffix: '_agent1'
      useDemands: false
  - template: stages/rg-tags.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: prd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/rg-tags'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_prd_agent1'
      poolSuffix: '_agent1'
      useDemands: false
  - template: stages/kv-secrets.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: prd
      secretsCsvPath: ${{ parameters.kvSecretsCsvPath }}
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-secrets'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_prd_agent1'
      poolSuffix: '_agent1'
      useDemands: false
  - template: stages/kv-permissions.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: prd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-perms'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_prd_agent1'
      poolSuffix: '_agent1'
      useDemands: false
  - template: stages/kv-firewall.stage.yml
    parameters:
      run_mode: AllADH
      adh_subscription_type: prd
      variableGroup: 'modernization_tfstate_backend_details'
      outDir: '$(Build.ArtifactStagingDirectory)/kv-firewall'
      branchName: '$(Build.SourceBranchName)'
      poolType: self
      poolName: 'MDM_prd_agent1'
      poolSuffix: '_agent1'
      useDemands: false

# ===================== MANUAL: ByCustodian (single) =====================
- ${{ if and(eq(parameters.run_mode, 'ByCustodian'), eq(length(parameters.adh_groups_list), 0)) }}:
  - stage: ByCustodian_Single
    displayName: "ByCustodian – ${{ format('{0} ({1})', parameters.adh_group, parameters.adh_subscription_type) }}"
    jobs:
    - template: stages/rg-permissions.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        prodCsvPath: ${{ parameters.prodCsvPath }}
        nonProdCsvPath: ${{ parameters.nonProdCsvPath }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/rg-perms'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        # Explicit pool name rule for single runs:
        poolName: ${{ format('{0}_{1}{2}', parameters.adh_group, parameters.adh_subscription_type, parameters.poolSuffix) }}
        poolSuffix: ${{ parameters.poolSuffix }}
        useDemands: true

    - template: stages/rg-tags.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/rg-tags'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolName: ${{ format('{0}_{1}{2}', parameters.adh_group, parameters.adh_subscription_type, parameters.poolSuffix) }}
        poolSuffix: ${{ parameters.poolSuffix }}
        useDemands: true

    - template: stages/kv-secrets.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        secretsCsvPath: ${{ parameters.kvSecretsCsvPath }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/kv-secrets'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolName: ${{ format('{0}_{1}{2}', parameters.adh_group, parameters.adh_subscription_type, parameters.poolSuffix) }}
        poolSuffix: ${{ parameters.poolSuffix }}
        useDemands: true

    - template: stages/kv-permissions.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/kv-perms'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolName: ${{ format('{0}_{1}{2}', parameters.adh_group, parameters.adh_subscription_type, parameters.poolSuffix) }}
        poolSuffix: ${{ parameters.poolSuffix }}
        useDemands: true

    - template: stages/kv-firewall.stage.yml
      parameters:
        run_mode: ByCustodian
        adh_group: ${{ parameters.adh_group }}
        adh_subscription_type: ${{ parameters.adh_subscription_type }}
        variableGroup: 'modernization_tfstate_backend_details'
        outDir: '$(Build.ArtifactStagingDirectory)/kv-firewall'
        branchName: '$(Build.SourceBranchName)'
        poolType: self
        poolName: ${{ format('{0}_{1}{2}', parameters.adh_group, parameters.adh_subscription_type, parameters.poolSuffix) }}
        poolSuffix: ${{ parameters.poolSuffix }}
        useDemands: true

# ========== MANUAL: ByCustodian (multi list; shared pool = first custodian) ==========
- ${{ if and(eq(parameters.run_mode, 'ByCustodian'), gt(length(parameters.adh_groups_list), 0)) }}:
  - stage: ByCustodian_Multi
    displayName: "ByCustodian – Multi (${{ format('{0}…', variables.firstCustodian) }})"
    jobs:

    # ---- RG Permissions ----
    - ${{ each cust in parameters.adh_groups_list }}:
      - template: .azure-pipelines/templates/job.powershell-with-az.yml
        parameters:
          variableGroup: modernization_tfstate_backend_details
          displayName: "RG Permissions – ${{ cust }}"
          scriptPath: 'sanitychecks/scripts/Scan-RG-Permissions-ByCustodian.ps1'
          workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
          arguments: >
            -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
            -ProdCsvPath '${{ parameters.prodCsvPath }}' -NonProdCsvPath '${{ parameters.nonProdCsvPath }}'
            -adh_group "${{ cust }}" -OutputDir "$(Build.ArtifactStagingDirectory)/rg-perms" -BranchName "$(Build.SourceBranchName)"
          artifactName: "rg-perms"
          publishPath: "$(Build.ArtifactStagingDirectory)/rg-perms"
          poolType: self
          poolName: ${{ format('{0}_{1}{2}', variables.firstCustodian, parameters.adh_subscription_type, parameters.poolSuffix) }}
          poolSuffix: ${{ parameters.poolSuffix }}
          adh_group: ''                    # demands OFF for shared pool
          adh_subscription_type: ${{ parameters.adh_subscription_type }}
          useDemands: false

    # ---- RG Tags ----
    - ${{ each cust in parameters.adh_groups_list }}:
      - template: .azure-pipelines/templates/job.powershell-with-az.yml
        parameters:
          variableGroup: modernization_tfstate_backend_details
          displayName: "RG Tags – ${{ cust }}"
          scriptPath: 'sanitychecks/scripts/Scan-RG-Tags.ps1'
          workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
          arguments: >
            -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
            -adh_group "${{ cust }}" -OutputDir "$(Build.ArtifactStagingDirectory)/rg-tags" -BranchName "$(Build.SourceBranchName)"
          artifactName: "rg-tags"
          publishPath: "$(Build.ArtifactStagingDirectory)/rg-tags"
          poolType: self
          poolName: ${{ format('{0}_{1}{2}', variables.firstCustodian, parameters.adh_subscription_type, parameters.poolSuffix) }}
          poolSuffix: ${{ parameters.poolSuffix }}
          adh_group: ''
          adh_subscription_type: ${{ parameters.adh_subscription_type }}
          useDemands: false

    # ---- KV Secrets ----
    - ${{ each cust in parameters.adh_groups_list }}:
      - template: .azure-pipelines/templates/job.powershell-with-az.yml
        parameters:
          variableGroup: modernization_tfstate_backend_details
          displayName: "KV Secrets – ${{ cust }}"
          scriptPath: 'sanitychecks/scripts/Scan-KV-Secrets-ByCustodian.ps1'
          workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
          arguments: >
            -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
            -SecretCsvPath '${{ parameters.kvSecretsCsvPath }}'
            -adh_group "${{ cust }}" -OutputDir "$(Build.ArtifactStagingDirectory)/kv-secrets" -BranchName "$(Build.SourceBranchName)"
          artifactName: "kv-secrets"
          publishPath: "$(Build.ArtifactStagingDirectory)/kv-secrets"
          poolType: self
          poolName: ${{ format('{0}_{1}{2}', variables.firstCustodian, parameters.adh_subscription_type, parameters.poolSuffix) }}
          poolSuffix: ${{ parameters.poolSuffix }}
          adh_group: ''
          adh_subscription_type: ${{ parameters.adh_subscription_type }}
          useDemands: false

    # ---- KV Permissions ----
    - ${{ each cust in parameters.adh_groups_list }}:
      - template: .azure-pipelines/templates/job.powershell-with-az.yml
        parameters:
          variableGroup: modernization_tfstate_backend_details
          displayName: "KV Permissions – ${{ cust }}"
          scriptPath: 'sanitychecks/scripts/Scan-KV-Permissions.ps1'
          workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
          arguments: >
            -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
            -adh_group "${{ cust }}" -OutputDir "$(Build.ArtifactStagingDirectory)/kv-perms" -BranchName "$(Build.SourceBranchName)"
          artifactName: "kv-perms"
          publishPath: "$(Build.ArtifactStagingDirectory)/kv-perms"
          poolType: self
          poolName: ${{ format('{0}_{1}{2}', variables.firstCustodian, parameters.adh_subscription_type, parameters.poolSuffix) }}
          poolSuffix: ${{ parameters.poolSuffix }}
          adh_group: ''
          adh_subscription_type: ${{ parameters.adh_subscription_type }}
          useDemands: false

    # ---- KV Firewall ----
    - ${{ each cust in parameters.adh_groups_list }}:
      - template: .azure-pipelines/templates/job.powershell-with-az.yml
        parameters:
          variableGroup: modernization_tfstate_backend_details
          displayName: "KV Firewall – ${{ cust }}"
          scriptPath: 'sanitychecks/scripts/Scan-KV-Networks.ps1'
          workingDir: '$(Build.SourcesDirectory)/sanitychecks/scripts'
          arguments: >
            -TenantId "$(tenant_id)" -ClientId "$(backend_client_id)" -ClientSecret "$(backend_client_secret)"
            -adh_group "${{ cust }}" -OutputDir "$(Build.ArtifactStagingDirectory)/kv-firewall" -BranchName "$(Build.SourceBranchName)"
          artifactName: "kv-firewall"
          publishPath: "$(Build.ArtifactStagingDirectory)/kv-firewall"
          poolType: self
          poolName: ${{ format('{0}_{1}{2}', variables.firstCustodian, parameters.adh_subscription_type, parameters.poolSuffix) }}
          poolSuffix: ${{ parameters.poolSuffix }}
          adh_group: ''
          adh_subscription_type: ${{ parameters.adh_subscription_type }}
          useDemands: false
