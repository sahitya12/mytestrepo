<#
Requires pipeline env vars:
  tenant_id, client_id, client_secret (SPN)
  adh_group (custodian name, used in output filenames)
Optional:
  INCLUDE_SECRET_VALUES = "true" | "false"  (default: true)
Files in repo:
  secrets.xlsx  (Worksheet: "KVSecrets", Column: "SECRET NAME")
YAML:
  - checkout: self (persistCredentials: true) for git push
#>

# ---------- Modules ----------
if (-not (Get-Module -ListAvailable -Name Az)) {
    Install-Module -Name Az -Force -AllowClobber -Scope CurrentUser -Confirm:$false
}
Import-Module Az -ErrorAction Stop

if (-not (Get-Module -ListAvailable -Name ImportExcel)) {
    Install-Module -Name ImportExcel -Force -Scope CurrentUser -Confirm:$false
}
Import-Module ImportExcel -ErrorAction Stop

# ---------- Env ----------
$adh_group     = "$($env:adh_group)"
$tenantId      = $env:tenant_id
$clientId      = $env:client_id
$clientSecret  = $env:client_secret
$includeValues = $true
if ($env:INCLUDE_SECRET_VALUES) { $includeValues = [System.Convert]::ToBoolean($env:INCLUDE_SECRET_VALUES) }

if ([string]::IsNullOrWhiteSpace($adh_group)) { Write-Error "Missing pipeline variable 'adh_group'."; exit 1 }
foreach ($v in @('tenant_id','client_id','client_secret')) {
    if (-not $env:$v) { Write-Error "Missing required secret variable '$v'."; exit 1 }
}

# ---------- Paths ----------
$repoRoot = $env:Build_SourcesDirectory
if (-not $repoRoot) { $repoRoot = $env:System_DefaultWorkingDirectory }
if (-not $repoRoot) { Write-Error "Could not resolve repo root path."; exit 1 }

$ExcelPath        = Join-Path $repoRoot "secrets.xlsx"
$WorksheetName    = "KVSecrets"
$SecretColumnName = "SECRET NAME"

$timestamp = (Get-Date).ToString("yyyyMMdd_HHmmss")
$outDir    = Join-Path $repoRoot "kv-scan"
if (-not (Test-Path $outDir)) { New-Item -Path $outDir -ItemType Directory -Force | Out-Null }

$baseName = "$adh_group-KeyVault-Secret-Check-$timestamp"
$csvPath  = Join-Path $outDir "$baseName.csv"
$htmlPath = Join-Path $outDir "$baseName.html"

# ---------- Azure Login ----------
try {
    $spCred = New-Object System.Management.Automation.PSCredential (
        $clientId,
        (ConvertTo-SecureString -String $clientSecret -AsPlainText -Force)
    )
    Connect-AzAccount -ServicePrincipal -Tenant $tenantId -Credential $spCred -ErrorAction Stop | Out-Null
} catch {
    Write-Error "Azure login failed: $_"
    exit 1
}

# ---------- Read Excel ----------
if (-not (Test-Path -LiteralPath $ExcelPath)) {
    Write-Error "Secrets workbook not found at: $ExcelPath"
    exit 1
}

try {
    $sheetData = Import-Excel -Path $ExcelPath -WorksheetName $WorksheetName -ErrorAction Stop
} catch {
    Write-Error "Failed to read sheet '$WorksheetName' from $ExcelPath : $_"
    exit 1
}

if (-not $sheetData) { Write-Error "Sheet '$WorksheetName' is empty."; exit 1 }
if (-not ($sheetData | Get-Member -Name $SecretColumnName -MemberType NoteProperty)) {
    Write-Error "Column '$SecretColumnName' not found in worksheet '$WorksheetName'."
    exit 1
}

$SecretNames = $sheetData |
    Select-Object -ExpandProperty $SecretColumnName |
    Where-Object { $_ -and $_.ToString().Trim() } |
    ForEach-Object { $_.ToString().Trim() } |
    Sort-Object -Unique

if (-not $SecretNames) { Write-Error "No secret names found in '$SecretColumnName'."; exit 1 }
Write-Host "Loaded $($SecretNames.Count) secret names from $WorksheetName."

# ---------- Scan subscriptions & vaults ----------
try {
    $subscriptions = Get-AzSubscription -ErrorAction Stop
} catch {
    Write-Error "Failed to enumerate subscriptions: $_"
    exit 1
}
if (-not $subscriptions) { Write-Error "No subscriptions available for this service principal."; exit 1 }

# Helper to maybe mask (we default to include values = true per requirement)
function Render-Value {
    param([string]$Value)
    if (-not $includeValues) {
        if ([string]::IsNullOrEmpty($Value)) { return "" }
        if ($Value.Length -le 6) { return "***masked***" }
        return "{0}{1}{2}" -f $Value.Substring(0,2), "***masked***", $Value.Substring($Value.Length-2,2)
    }
    return $Value
}

$results = New-Object System.Collections.Generic.List[object]

foreach ($sub in $subscriptions) {
    try {
        Set-AzContext -SubscriptionId $sub.Id -ErrorAction Stop | Out-Null
    } catch {
        Write-Warning "Skipping subscription '$($sub.Name)' due to context error: $($_.Exception.Message)"
        continue
    }

    Write-Host "`n==> Subscription: $($sub.Name) [$($sub.Id)]"
    $vaults = @()
    try {
        $vaults = Get-AzKeyVault -ErrorAction Stop
    } catch {
        Write-Warning "  Could not list Key Vaults in '$($sub.Name)': $($_.Exception.Message)"
        continue
    }
    if (-not $vaults) { Write-Host "  No Key Vaults found."; continue }

    foreach ($kv in $vaults) {
        Write-Host "  -> Vault: $($kv.VaultName)"
        foreach ($secName in $SecretNames) {
            try {
                $sec = Get-AzKeyVaultSecret -VaultName $kv.VaultName -Name $secName -ErrorAction Stop
                $val = Render-Value -Value $sec.SecretValueText
                $results.Add([PSCustomObject]@{
                    Custodian        = $adh_group
                    SubscriptionName = $sub.Name
                    SubscriptionId   = $sub.Id
                    VaultName        = $kv.VaultName
                    SecretName       = $secName
                    Exists           = "Yes"
                    Value            = $val
                    Version          = $sec.Version
                    ContentType      = $sec.ContentType
                    UpdatedOn        = $sec.Updated
                })
            } catch {
                $results.Add([PSCustomObject]@{
                    Custodian        = $adh_group
                    SubscriptionName = $sub.Name
                    SubscriptionId   = $sub.Id
                    VaultName        = $kv.VaultName
                    SecretName       = $secName
                    Exists           = "No"
                    Value            = ""
                    Version          = ""
                    ContentType      = ""
                    UpdatedOn        = ""
                })
            }
        }
    }
}

# ---------- CSV ----------
$results |
  Sort-Object Custodian, SubscriptionName, VaultName, SecretName |
  Export-Csv -Path $csvPath -NoTypeInformation -Encoding UTF8

Write-Host "CSV saved: $csvPath"

# ---------- HTML (green/red) ----------
$style = @"
table { border-collapse: collapse; font-family: Arial; font-size: 12px; }
th, td { border: 1px solid #ddd; padding: 6px 8px; }
th { background: #f2f2f2; text-align: left; }
tr:nth-child(even) { background: #fafafa; }
.bad { color: #a40000; font-weight: 600; }
.good { color: #0b6a0b; font-weight: 600; }
"@

$rowsHtml = ($results | Sort-Object Custodian, SubscriptionName, VaultName, SecretName | ForEach-Object {
    $cls = if ($_.Exists -eq "Yes") { "good" } else { "bad" }
    "<tr><td>$($_.Custodian)</td><td>$($_.SubscriptionName)</td><td>$($_.SubscriptionId)</td><td>$($_.VaultName)</td><td>$($_.SecretName)</td><td class='$cls'>$($_.Exists)</td><td>$($_.Value)</td><td>$($_.Version)</td><td>$($_.ContentType)</td><td>$($_.UpdatedOn)</td></tr>"
}) -join "`n"

$html = @"
<html>
<head><meta charset='UTF-8'><style>$style</style></head>
<body>
<h3>Key Vault Secret Check Results â€” Custodian: $adh_group</h3>
<p>Run: $(Get-Date)</p>
<table>
<thead>
<tr>
  <th>Custodian</th><th>Subscription</th><th>SubscriptionId</th><th>KeyVault</th><th>Secret</th><th>Status</th><th>Value</th><th>Version</th><th>ContentType</th><th>UpdatedOn</th>
</tr>
</thead>
<tbody>
$rowsHtml
</tbody>
</table>
</body></html>
"@

Set-Content -Path $htmlPath -Value $html -Encoding UTF8
Write-Host "HTML saved: $htmlPath"

# ---------- Commit & Push ----------
try {
    Set-Location $repoRoot
    git config user.email "ado-bot@local"
    git config user.name "ADO Pipeline Bot"
    git add $csvPath $htmlPath
    git commit -m "[$adh_group] Key Vault secret check - $timestamp" `
        || Write-Host "No changes to commit."
    git push
} catch {
    Write-Warning "Failed to push results back to repo: $($_.Exception.Message)"
}

Write-Host "`nComplete."
