param(
    [Parameter(Mandatory=$true)]
    [string]$adh_group,                 # e.g. CSM, HDD, HGS  (we will search *_ADH<adh_group>)
    [Parameter(Mandatory=$true)]
    [ValidateSet('prd','nonprd')]
    [string]$adh_subscription_type,     # prd | nonprd (nonprd = dev only)
    [string]$FilePath,                  # defaults to resource_sanitychecks.xlsx under this folder
    [bool]$IncludeSecretValues = $true  # set false to mask values in CSV
)

# ---------------- Modules ----------------
if (-not (Get-Module -ListAvailable -Name Az)) {
    Install-Module -Name Az -Force -AllowClobber -Scope CurrentUser -Confirm:$false
}
Import-Module Az -ErrorAction Stop

if (-not (Get-Module -ListAvailable -Name ImportExcel)) {
    Install-Module -Name ImportExcel -Force -Scope CurrentUser -Confirm:$false
}
Import-Module ImportExcel -ErrorAction Stop

# ---------------- Inputs & Env from Variable Groups ----------------
# Expect these to be linked via ADO variable groups:
# modernization_terraform_subscription_details, test_modernization_terraform_subscription_details, modernization_tfstate_backend_details
$clientId     = $env:client_id
$clientSecret = $env:client_secret
if ([string]::IsNullOrWhiteSpace($clientId) -or [string]::IsNullOrWhiteSpace($clientSecret)) {
    throw "Missing Service Principal credentials (client_id / client_secret) from variable groups."
}

# Base paths
$BasePath = Join-Path $env:System_DefaultWorkingDirectory 'Modernization_Terraform/sanitychecks'
if (-not (Test-Path $BasePath)) { throw "Base path not found: $BasePath" }

# Workbook path (default to .xlsx in same folder). Weâ€™ll also accept .xls/.xlx silently.
if (-not $FilePath) { $FilePath = Join-Path $BasePath 'resource_sanitychecks.xlsx' }
function Resolve-Workbook([string]$p) {
    if (Test-Path -LiteralPath $p) { return $p }
    $alt1 = [IO.Path]::ChangeExtension($p,'xls');  if (Test-Path -LiteralPath $alt1) { return $alt1 }
    $alt2 = [IO.Path]::ChangeExtension($p,'xlx');  if (Test-Path -LiteralPath $alt2) { return $alt2 }
    throw "Workbook not found. Tried: $p / $alt1 / $alt2"
}
$ExcelPath = Resolve-Workbook -p $FilePath

# ---------------- Read KV Secrets from Excel ----------------
$WorksheetName    = 'KVSecrets'
$SecretColumnName = 'SECRET NAME'

$data = Import-Excel -Path $ExcelPath -WorksheetName $WorksheetName -ErrorAction Stop
if (-not ($data | Get-Member -Name $SecretColumnName -MemberType NoteProperty)) {
    throw "Column '$SecretColumnName' not found in sheet '$WorksheetName'."
}
$SecretNames = $data.$SecretColumnName |
    Where-Object { $_ -and $_.ToString().Trim() } |
    ForEach-Object { $_.ToString().Trim() } |
    Sort-Object -Unique
if (-not $SecretNames) { throw "No secret names found in '$SecretColumnName'." }

# ---------------- Login (tenant NOT required by your request) ----------------
$spCred = New-Object System.Management.Automation.PSCredential ($clientId, (ConvertTo-SecureString $clientSecret -AsPlainText -Force))
try {
    Connect-AzAccount -ServicePrincipal -Credential $spCred -ErrorAction Stop | Out-Null
} catch {
    # If your org requires tenant, set tenant_id in variable group and uncomment next two lines:
    # $tenantId = $env:tenant_id
    # if ($tenantId) { Connect-AzAccount -ServicePrincipal -Tenant $tenantId -Credential $spCred -ErrorAction Stop | Out-Null } else { throw }
    throw
}

# ---------------- Pick subscriptions by name ----------------
# Naming examples:
#   dev_azure_20921_ADHCSM  (adh_group = CSM  -> suffix="_ADHCSM")
#   prd_azure_20920_ADHHDD  (adh_group = HDD  -> suffix="_ADHHDD")
$allSubs = Get-AzSubscription -ErrorAction Stop
$suffix  = "_ADH$adh_group"   # build required custodian suffix

if ($adh_subscription_type -eq 'nonprd') {
    # Your rule: nonprd => dev subscription only (tst & stg live within dev)
    $subs = $allSubs | Where-Object { $_.Name -like "dev_*$suffix" }
} else {
    $subs = $allSubs | Where-Object { $_.Name -like "prd_*$suffix" }
}

if (-not $subs) {
    throw "No subscriptions matched: adh_subscription_type='$adh_subscription_type', suffix='$suffix'. Example expected: dev_*$suffix or prd_*$suffix"
}

# ---------------- Helpers ----------------
function Render-Value([string]$v, [bool]$include) {
    if ($include) { return $v }
    if ([string]::IsNullOrEmpty($v)) { return "" }
    if ($v.Length -le 6) { return "***masked***" }
    return "{0}{1}{2}" -f $v.Substring(0,2),'***masked***',$v.Substring($v.Length-2,2)
}

# ---------------- Scan ----------------
$results = New-Object System.Collections.Generic.List[object]

foreach ($sub in $subs) {
    Write-Host "`n=== Subscription: $($sub.Name) [$($sub.Id)] ==="
    Set-AzContext -SubscriptionId $sub.Id -ErrorAction Stop | Out-Null

    $vaults = @()
    try {
        $vaults = Get-AzKeyVault -ErrorAction Stop
    } catch {
        Write-Warning "  Could not list Key Vaults: $($_.Exception.Message)"
        $vaults = @()
    }

    if (-not $vaults -or $vaults.Count -eq 0) {
        foreach ($secName in $SecretNames) {
            $results.Add([pscustomobject]@{
                Custodian        = $adh_group
                SubscriptionName = $sub.Name
                SubscriptionId   = $sub.Id
                VaultName        = "N/A (no key vaults)"
                SecretName       = $secName
                Exists           = "No"
                Value            = ""
                Version          = ""
                ContentType      = ""
                UpdatedOn        = ""
                MissingReason    = "No Key Vaults in subscription"
            })
        }
        continue
    }

    foreach ($kv in $vaults) {
        Write-Host "  -> Vault: $($kv.VaultName)"
        foreach ($secName in $SecretNames) {
            try {
                $sec = Get-AzKeyVaultSecret -VaultName $kv.VaultName -Name $secName -ErrorAction Stop
                $results.Add([pscustomobject]@{
                    Custodian        = $adh_group
                    SubscriptionName = $sub.Name
                    SubscriptionId   = $sub.Id
                    VaultName        = $kv.VaultName
                    SecretName       = $secName
                    Exists           = "Yes"
                    Value            = (Render-Value $sec.SecretValueText $IncludeSecretValues)
                    Version          = $sec.Version
                    ContentType      = $sec.ContentType
                    UpdatedOn        = $sec.Updated
                    MissingReason    = ""
                })
            } catch {
                $results.Add([pscustomobject]@{
                    Custodian        = $adh_group
                    SubscriptionName = $sub.Name
                    SubscriptionId   = $sub.Id
                    VaultName        = $kv.VaultName
                    SecretName       = $secName
                    Exists           = "No"
                    Value            = ""
                    Version          = ""
                    ContentType      = ""
                    UpdatedOn        = ""
                    MissingReason    = "Secret not found"
                })
            }
        }
    }
}

# ---------------- Output CSV ----------------
$outDir  = Join-Path $BasePath 'kv-scan'
if (-not (Test-Path $outDir)) { New-Item -ItemType Directory -Path $outDir | Out-Null }
$ts      = (Get-Date).ToString('yyyyMMdd_HHmmss')
$outCsv  = Join-Path $outDir "$adh_group-KeyVault-Secret-Check-$ts.csv"

$results |
  Sort-Object SubscriptionName, VaultName, SecretName |
  Export-Csv -Path $outCsv -NoTypeInformation -Encoding UTF8

Write-Host "Scan complete. CSV: $outCsv"
